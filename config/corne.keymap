/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <400>;
            quick-tap-ms = <0>;
            require-prior-idle-ms = <125>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESCAPE            &kp Q           &kp W           &kp E             &kp R        &kp T        &kp Y      &kp U        &kp I              &kp O            &kp P               &kp BSPC
&hm LEFT_COMMAND TAB  &hm LEFT_ALT A  &hm LEFT_GUI S  &hm LEFT_SHIFT D  &hm LCTRL F  &kp G        &kp H      &hm RCTRL J  &hm RIGHT_SHIFT K  &hm RIGHT_GUI L  &hm RIGHT_ALT SEMI  &kp SQT
&kp LEFT_CONTROL      &kp Z           &kp X           &kp C             &kp V        &kp B        &kp N      &kp M        &kp COMMA          &kp DOT          &kp FSLH            &kp RIGHT_SHIFT
                                                      &kp LGUI          &mo 1        &kp ENTER    &kp SPACE  &mo 2        &kp LEFT_ALT
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE  &kp N1      &kp N2             &kp N3           &kp N4  &kp N5    &kp N6            &kp N7             &kp N8     &kp N9    &kp N0         &kp EQUAL
&trans     &kp K_MUTE  &kp K_VOLUME_DOWN  &kp K_VOLUME_UP  &none   &none     &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp MINUS  &kp PLUS  &kp BACKSLASH  &kp PIPE
&trans     &trans      &kp MINUS          &kp EQUAL        &trans  &trans    &kp LEFT_BRACE    &kp RIGHT_BRACE    &trans     &trans    &trans         &trans
                                          &kp LGUI         &trans  &trans    &trans            &mo 3              &kp RALT
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp TILDE  &kp EXCL   &kp AT    &kp HASH          &kp DLLR           &kp PRCNT    &kp CARET  &kp AMPS  &kp UP_ARROW  &kp LPAR   &kp K_SCROLL_UP    &kp PG_UP
&trans     &kp MINUS  &kp PLUS  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &trans       &trans     &kp LEFT  &kp DOWN      &kp RIGHT  &kp K_SCROLL_DOWN  &kp PAGE_DOWN
&trans     &trans     &trans    &kp LEFT_BRACE    &kp RIGHT_BRACE    &trans       &kp EQUAL  &kp PLUS  &kp LBRC      &kp RBRC   &kp PIPE           &trans
                                &kp LGUI          &trans             &trans       &trans     &trans    &kp RALT
            >;
        };

        layer_3 {
            bindings = <
&kp ESC  &kp F1        &kp F2        &kp F3        &kp F4        &kp F5    &kp F6                          &kp F7           &kp F8           &kp F9           &kp F12                            &bt BT_CLR_ALL
&trans   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &trans        &trans    &trans                          &rgb_ug RGB_EFF  &rgb_ug RGB_BRI  &rgb_ug RGB_BRD  &rgb_ug RGB_SAI                    &rgb_ug RGB_SAD
&trans   &bt BT_NXT    &bt BT_CLR    &out OUT_BLE  &out OUT_USB  &trans    &rgb_ug RGB_COLOR_HSB(0,86,18)  &trans           &rgb_ug RGB_HUI  &rgb_ug RGB_HUD  &rgb_ug RGB_COLOR_HSB(179,100,50)  &rgb_ug RGB_COLOR_HSB(301,100,50)
                                     &trans        &trans        &trans    &trans                          &trans           &trans
            >;
        };
    };
};
